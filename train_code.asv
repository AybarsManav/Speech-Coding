root_dir = "database/";
% Find audio files
audio_signal_paths = find_wav_files(root_dir);
n_signals = length(audio_signal_paths);
audio_signals = cell(n_signals, 1);

% Read every audio file in their native forms, here 16 bit integer
for i = 1:n_signals
    audio_signals{i} = audioread(audio_signal_paths{i}, "native");
end

% Make a train and test split of 0.7 to 0.3
train_ratio = 0.7;
train_size = round(0.7 * n_signals);
rand_indices = randperm(n_signals);
train_signals = audio_signals(rand_indices(1:train_size));
test_signals = audio_signals(rand_indices(train_size+1:end));

%% 
% Parameters could be: block-length, quantization level, quantization type
[dict, avg_length] = train_huffman(train_signals, 15, "uniform");

%% Test parameters
bits_per_sample = 15;
quantization_type = "uniform";
original_test_signal = train_signals{1};
%% Test
function test_huffman(test_signal, bits_per_sample, quantization_type)
% Quantize the signal similarly
n_levels = 2 ^ bits_per_sample;
if bits_per_sample ~= 16
    n_levels = 2^bits_per_sample;
    test_signal = double(original_test_signal) / 2^15; % [-1, 1]
    test_signal = floor(test_signal * (n_levels / 2));
end

% Quantize using dpcm 
if quantization_type == "dpcm"
    audio_quantized = diff(test_signal);
else
    audio_quantized = test_signal;
end

% Encoding and decoding time
tic;
encoded_data = huffmanenco(audio_quantized, dict);
encode_time = toc;

tic;
decoded_data = huffmandeco(encoded_data, dict);
decoded_time = toc;

fprintf('Encoding Time: %.4f sec\n', encode_time);
fprintf('Decoding Time: %.4f sec\n', decoded_time);

%% Reconstruction Error
if quantization_type == "dpcm"
    reconstructed_signal = cumsum([audio_quantized(1); decoded_data]);
else
    reconstructed_signal = decoded_data;
end

% To make reconstructed signal have the same scale as the original
reconstructed_signal = reconstructed_signal * 2^(16 - bits_per_sample);

RMSE = sqrt(mean((reconstructed_signal  - double(original_test_signal)).^2 ));

fprintf('RMSE = %f \n', RMSE);
%% Compression rate
original_size = numel(original_test_signal) * 16; % Originally 16 bit per sample
compressed_size = numel(encoded_data);

compression_ratio = original_size / compressed_size;
fprintf('compression_ratio = %f\n', compression_ratio);
end















